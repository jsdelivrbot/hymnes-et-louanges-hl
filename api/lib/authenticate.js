(function() {
  /*
   * @desc Restful API - Handles all HTTP requests (GET, POST, PUT, DELETE);
   */

  const auth = require('basic-auth');
  const jwt = require('jsonwebtoken');
  const atob = require('atob');
  const FAILURE = {
    success: false,
    message: 'Failed to authenticate token.',
  };    

  module.exports = function(app) {

    /**
     * Handler to allow authentication
     * It renders form when API is not authenticated, otherwise provide
     * authentication info.
     */
    app.get(app.get('path') + '/authenticate', (req, res) => {
      const user = auth(req);
      // Check is call defined custome authentication funciton.
      if (user && app.locals.authorize) {
        app.locals.authorize(user)
          .then(info => app.sendToken(res, info))
          .catch(() => res.send({success: false}));
        return;
      }
      if (user) {
        app.sendToken(res, user);
      }
      else {
        // Checks if user has an active session.
        app.locals.checkAccessToken(req).then(decoded => {
          res.send({token: decoded.token, success: true});
        }).catch(() => {
          res.render('login', {info: 'Login'});
        });
      }
    });

    /**
     * Allow authentication based on forms.
     * @returns {void}
     */
    app.post(app.get('path') + '/authenticate', (req, res) => {
      req.body.pass = atob(req.body.pass);
      app.locals.authorize(req.body)
        .then(info => app.sendToken(res, info))
        .catch(() => res.send({success: false}));
    });

    /**
     * Send token info back to client.
     * @param {!Object} res - HTTP response
     * @param {!Object} info - object to tokenize
     * @returns {void}
     */
    app.sendToken = function (res, info) {
      const token = app.setToken(res, info);
      res.send(Object.assign(app.locals.cookieOptions, {token, success: true}));
    };

    /**
     * Write token info to response header.
     * @param {!Object} res - HTTP response
     * @param {!Object} info - object to tokenize
     * @returns {string} - token infomartion
     */
    app.setToken = function(res, info) {
      const token = jwt.sign(Object.assign(info || {}, {
        exp: (Date.now() / 1000) + app.get('sessionAge'),
      }), app.get('secret'));
      res.cookie('access_token', token, app.locals.cookieOptions);
      return token;
    };

    /**
     * Verify authencation on specified routes.
     * @param {!Object} req - HTTP request
     * @param {!Object} res - HTTP response
     * @param {!Function} next - to decide whether to proceed to query handler.
     * @returns {void}
     */
    app.use((req, res, next) => {
      for (const route of app.locals.PROTECTED_ROUTES) {
        let baseRoute = route;
        let modPath = `${req.method.toLowerCase()}${req.path}`;
        let index = route.indexOf('*');
        if (index > -1) {
          baseRoute = route.substring(0, index);
        }
        if (modPath.indexOf(baseRoute) > -1) {
          let path = modPath.replace(baseRoute, '').replace(
            /[^/]+/g, '*');
          if (path && path.substr(path.length - 1) === '/') {
            path = path.substr(0, path.length - 1);
          }
          if (path === route.replace(baseRoute, '')) {
            app.locals.checkAccessToken(req).then(decoded => {
              req.decoded = decoded;    
              // remove data generated by tokenizer
              delete decoded.iat;
              delete decoded.exp;
              delete decoded.token;
              app.setToken(res, decoded);  // re-update token
              next();
            }).catch(() => {
              res.statusCode = 401;
              const user = auth(req);
              if (user && app.locals.authorize) {
                return app.locals.authorize(user)
                  .then(info => {
                    res.statusCode = 200;
                    app.setToken(res, info);
                    next();
                  })
                  .catch(() => res.send(FAILURE));
              }
              else {
                return res.json(FAILURE);
              }
            });
            return;
          }
        }
      }
      next();
    });

    /**
     * Decode and verify user's token.
     * @param {!Object} req - HTTP request
     * @return {Promise} - resolve for valid token
     */
    app.locals.checkAccessToken = function(req) {
      return new Promise((resolve, reject) => {
        const token = (req.body.token || req.query.token ||
          req.headers.access_token || req.cookies.access_token);
        jwt.verify(token, app.get('secret'), (err, decoded) => {      
          if (err) {
            reject(err);
          } else {
            decoded.token = token;
            resolve(decoded);
          }
        });
      });
    };
  };
})();
